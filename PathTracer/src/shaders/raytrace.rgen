#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_ARB_shader_clock : enable

#include "raycommon.glsl"

// clang-format off
layout(location = 0) rayPayloadEXT hitPayload prd;

layout(set = 0, binding = 0) uniform accelerationStructureEXT topLevelAS;
layout(set = 0, binding = 1, rgba32f) uniform image2D image;
layout(set = 1, binding = 0) uniform _GlobalUniforms { GlobalUniforms uni; };
layout(push_constant) uniform _PushConstantRay { PushConstantRay pcRay; };
// clang-format on

void main()
{
    uint seed = gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x + int(clockARB());
    prd.Seed = PCG(seed);

    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    const vec2 inUV        = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
    vec2       d           = inUV * 2.0 - 1.0;

    vec4 origin    = uni.ViewInverse * vec4(0, 0, 0, 1);
    vec4 target    = uni.ProjInverse * vec4(d.x, d.y, 1, 1);
    vec4 direction = uni.ViewInverse * vec4(normalize(target.xyz), 0);

    uint  rayFlags = gl_RayFlagsOpaqueEXT;
    float tMin     = 0.001;
    float tMax     = 10000.0;

    int sampleCount = 15;
    vec3 finalHitValue = vec3(0);

    prd.HitValue = vec3(0.0);
    prd.Depth = 0;
    prd.RayOrigin = origin.xyz;
    prd.RayDirection = direction.xyz;
    prd.Weight = vec3(0.0);
    prd.MissedAllGeometry = false;

    vec3 curWeight = vec3(1);
    vec3 hitValue  = vec3(0);

    int samplesAccumulated = 0;

    // if ray won't miss, do the sampling
    for (int i = 0; i < sampleCount; i++)
    {
        prd.HitValue = vec3(0.0);
        prd.Depth = 0;
        vec3 camRight = vec3(uni.ViewInverse[0][0], uni.ViewInverse[1][0], uni.ViewInverse[2][0]);
        vec3 camUp = vec3(uni.ViewInverse[0][1], uni.ViewInverse[1][1], uni.ViewInverse[2][1]);
        //vec3 camUp = vec3(0.0f, 1.0f, 0.0f);
        //vec3 camRight = vec3(1.0f, 0.0f, 0.0f);

        // Applying small jitter for anti aliasing
        vec2 antiAliasingJitter = RandomPointInCircle(prd.Seed) * 0.3f / gl_LaunchSizeEXT.x;
        direction.xyz += camRight * antiAliasingJitter.x + camUp * antiAliasingJitter.y;

        vec3 focalPoint = origin.xyz + normalize(direction.xyz) * pcRay.FocalLenght;

        vec2 jitter = RandomPointInCircle(prd.Seed) * pcRay.DoFStrenght / gl_LaunchSizeEXT.x;

        prd.RayOrigin = origin.xyz + camRight * jitter.x + camUp * jitter.y;

        prd.RayDirection = normalize(focalPoint - prd.RayOrigin);
        prd.Weight = vec3(0.0);

        vec3 curWeight = vec3(1);
        vec3 hitValue  = vec3(0);

        for(; prd.Depth < pcRay.MaxDepth; prd.Depth++)
        {
            traceRayEXT(
                topLevelAS,        // acceleration structure
                rayFlags,          // rayFlags
                0xFF,              // cullMask
                0,                 // sbtRecordOffset
                0,                 // sbtRecordStride
                0,                 // missIndex
                prd.RayOrigin,     // ray origin
                tMin,              // ray min range
                prd.RayDirection,  // ray direction
                tMax,              // ray max range
                0                  // payload (location = 0)
            );
            
            hitValue += prd.HitValue * curWeight;
            curWeight *= prd.Weight;
        }
        finalHitValue += hitValue;
        samplesAccumulated++;

        if (prd.MissedAllGeometry)
		{
			break;
		}

        seed = gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x + prd.Seed;
        prd.Seed = PCG(seed);
    }
    finalHitValue /= float(samplesAccumulated);

    if (pcRay.Frame > 0)
    {
        float a  = 1.0f / float(pcRay.Frame + 1);
        vec3 old_color = imageLoad(image, ivec2(gl_LaunchIDEXT.xy)).xyz;
        imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(mix(old_color, finalHitValue, a), 1.f));
    }
    else
    {
        imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(finalHitValue, 1.f));
    }
}